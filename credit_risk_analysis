#信用卡违约率分析

#导入训练工具
from sklearn.model_selection import learning_curve,train_test_split,GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score

#导入各类分类器
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import AdaBoostClassifier

#导入数据分析工具
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import time

#数据加载
data = pd.read_csv('UCI_Credit_Card.csv')
print(data.shape)
print(data.describe())

#违约情况可视化
next_month = data['default.payment.next.month'].value_counts()
df = pd.DataFrame({'default.payment.next.month': next_month.index,'values': next_month.values})
plt.figure(figsize = (6,6))
plt.title('信用卡违约率客户\n(违约：1，守约：0)')
sns.set_color_codes('pastel')
sns.barplot(x = 'default.payment.next.month',
           y = 'values',
           data = df)
locs,labels = plt.xticks()
plt.show()


#特征选择，去掉id和标签字段
data.drop(['ID'],inplace = True,axis = 1)
columns  = data.columns.tolist()
columns.remove('default.payment.next.month')

features = data[columns].values
target = data['default.payment.next.month'].values

#划分测试和训练集
train_x,test_x,train_y,test_y = train_test_split(features,target,test_size = 0.3,stratify = target, random_state = 1)

#构造各种分类器
classifiers = [
    SVC(random_state = 1,kernel = 'rbf'),
    DecisionTreeClassifier(random_state =1,criterion = 'gini'),
    RandomForestClassifier(random_state =1,criterion = 'gini'),
    KNeighborsClassifier(metric  = 'minkowski'),
    AdaBoostClassifier(random_state = 1),
]

#分类器名称
classifier_names = [
    'svc',
    'decisiontreeclassifier',
    'randomforestclassifier',
    'kneighborsclassifier',
    'adaboostclassifier',
]

#分类器参数
classifier_param_grid = [
    {'svc__C': [1], 'svc__gamma': [0.01]},
    {'decisiontreeclassifier__max_depth': [6, 9, 11]},
    {'randomforestclassifier__n_estimators': [3, 5, 6]},
    {'kneighborsclassifier__n_neighbors': [4, 6, 8]},
    {'adaboostclassifier__n_estimators': [10, 50, 100]}
]

#对具体的分类器进行GridSearchCV参数调优


def GridSearchCV_work(pipeline, train_x, train_y, test_x, test_y, param_grid , score = 'accuracy'):
    
    time_start = time.time()
    
    response = {}
    gridsearch = GridSearchCV(estimator = pipeline,param_grid = param_grid,scoring = score)
    #寻找最优的参数和最优的准确率分数
    search = gridsearch.fit(train_x,train_y)
    print("GridSearch最优参数：", search.best_params_)
    print("GridSearch最优分数： %0.4lf" %search.best_score_)
    
    #进行预测和显示预测准确率
    predict_y = gridsearch.predict(test_x)
    print('准确率：',accuracy_score(test_y,predict_y))
    
    time_end = time.time()
    print('运行时间：',time_end - time_start,'s')

    response['predict_y'] = predict_y
    response['accuracy_score'] = accuracy_score(test_y,predict_y)
    return response

#遍历5个决策器
for model,model_name,model_param_grid in zip(classifiers,classifier_names,classifier_param_grid):
    pipeline = Pipeline([
        ('scaler',StandardScaler()),
        (model_name,model)
    ])
    result = GridSearchCV_work(pipeline, train_x, train_y, test_x, test_y, model_param_grid , score = 'accuracy')

